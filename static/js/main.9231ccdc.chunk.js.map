{"version":3,"sources":["QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","state","quote","content","author","getNewQuote","e","fetch","then","response","json","data","quotes","number","Math","floor","random","length","_this","setState","this","react_default","a","createElement","className","id","href","style","fontSize","type","onClick","Component","App","src_QuoteMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAoEeA,6MAjEbC,MAAQ,CACNC,MAAO,CACLC,QAAS,GACTC,OAAQ,OAGZC,YAAc,SAAAC,GACZC,MACE,0IAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAQ,IACJC,EAAWD,EAAXC,OACJC,EAASC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAC/CC,EAAKC,SAAS,CACZjB,MAAO,CACLC,QAASS,EAAOC,GAAQX,MACxBE,OAAQQ,EAAOC,GAAQT,qFAKxB,IACCF,EAAUkB,KAAKnB,MAAfC,MACR,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,GAAG,aACnCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,6BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,cAAYC,UAAU,aAAaC,GAAG,QACpCJ,EAAAC,EAAAC,cAAA,SAAIrB,EAAMC,UAEZkB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBC,GAAG,UACtCvB,EAAME,QAETiB,EAAAC,EAAAC,cAAA,KAAGG,KAAK,2BAA2BD,GAAG,eACpCJ,EAAAC,EAAAC,cAAA,KACEC,UAAU,2BACVG,MAAO,CAAEC,SAAU,WAIvBP,EAAAC,EAAAC,cAAA,UACEM,KAAK,SACLL,UAAU,+BACVM,QAASV,KAAKf,YACdoB,GAAG,aAJL,qCAjDWM,aCWZC,mLARX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAD,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.9231ccdc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass QuoteMachine extends Component {\n  state = {\n    quote: {\n      content: \"\",\n      author: \"\"\n    }\n  };\n  getNewQuote = e => {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n      .then(response => response.json())\n      .then(data => {\n        const { quotes } = data;\n        let number = Math.floor(Math.random() * quotes.length);\n        this.setState({\n          quote: {\n            content: quotes[number].quote,\n            author: quotes[number].author\n          }\n        });\n      });\n  };\n  render() {\n    const { quote } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row \">\n          <div className=\"col-md-6 mx-auto my-5\">\n            <div className=\"card text-center\" id=\"quote-box\">\n              <div className=\"card-header\">\n                <div className=\"card-title\">\n                  <h3>Quote Machine</h3>\n                </div>\n              </div>\n              <div className=\"card-body\">\n                <blockquote className=\"blockquote\" id=\"text\">\n                  <p>{quote.content}</p>\n                </blockquote>\n                <footer className=\"blockquote-footer\" id=\"author\">\n                  {quote.author}\n                </footer>\n                <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\n                  <i\n                    className=\"fab fa-twitter my-3 mr-3\"\n                    style={{ fontSize: \"30px\" }}\n                  />\n                </a>\n\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary mx-auto my-3\"\n                  onClick={this.getNewQuote}\n                  id=\"new-quote\"\n                >\n                  Click for a new quote\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuoteMachine;\n","import React, { Component } from \"react\";\nimport QuoteMachine from \"./QuoteMachine\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}